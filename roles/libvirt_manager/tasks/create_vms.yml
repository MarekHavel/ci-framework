---
- name: "Create VM overlays or images for {{ vm_type }}"
  become: true
  vars:
    _base_img_name: >-
      {{
        (vm_data.value.image_local_dir | default(ansible_user_dir),
         vm_data.value.disk_file_name) |
         path_join
      }}
    _img: >-
      {{
        (vm_type is match('.*ocp.*')) |
        ternary(_base_img_name ~ "_" ~ vm_id ~ ".qcow2",
                _base_img_name)
      }}
    _workload: "{{ cifmw_libvirt_manager_basedir }}/workload"
    _ocp_pool: "{{ ansible_libvirt_pools['oooq_pool']['path'] | default('') }}"
    _chdir: >-
      {{ (vm_type is match('.*ocp.*')) | ternary(_ocp_pool, _workload) }}
  block:
    - name: "Create VM overlay for {{ vm_type }}"
      vars:
        _vm_img: "{{ vm_type }}{{ cifmw_libvirt_manager_vm_separator }}{{ vm_id }}.qcow2"
      register: _create_overlays
      cifmw.general.ci_script:
        output_dir: "{{ cifmw_libvirt_manager_basedir }}/artifacts"
        script: >-
          qemu-img create
          {% if vm_data.value.disk_file_name != 'blank' %}
          -o backing_file={{ _img }},backing_fmt=qcow2
          {% endif %}
          -f qcow2
          "{{ _vm_img }}"
          "{{ vm_data.value.disksize|default ('40') }}G"
        creates: "{{ vm_type }}{{ cifmw_libvirt_manager_vm_separator }}{{ vm_id }}.qcow2"
        chdir: "{{ _chdir }}"
      loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
      loop_control:
        index_var: vm_id
        label: "{{ vm_type }}{{ cifmw_libvirt_manager_vm_separator }}{{ vm_id }}"

    - name: "Ensure file ownership and rights for {{ vm_type }}"
      become: true
      vars:
        _vm_img: "{{ vm_type }}{{ cifmw_libvirt_manager_vm_separator }}{{ vm_id }}.qcow2"
      ansible.builtin.file:
        path: "{{ (_chdir, _vm_img) | path_join }}"
        group: "qemu"
        mode: "0664"
        owner: "{{ ansible_user_id }}"
        state: file
      loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
      loop_control:
        index_var: vm_id
        label: "{{ vm_type }}{{ cifmw_libvirt_manager_vm_separator }}{{ vm_id }}"

- name: "Manipulate XMLs and load them if provided for {{ vm_type }}"
  when:
    - vm_data.value.xml_paths is defined
  ansible.builtin.include_tasks: ocp_xml.yml
  loop: "{{ vm_data.value.xml_paths | sort }}"
  loop_control:
    loop_var: "_xml"
    index_var: "_xml_id"
    label: "{{ vm_type }}{{ cifmw_libvirt_manager_vm_separator }}{{ _xml_id }}"

- name: "Define the requested virtual machines {{ vm_type }}"
  when:
    - vm_data.value.xml_paths is undefined
  block:
    - name: "Create the requested extra disks for {{ vm_type }}"
      when:
        - vm_data.value.extra_disks_num is defined
        - vm_data.value.extra_disks_num | int != 0
      vars:
        vol_prefix: "{{ cifmw_libvirt_manager_vm_prefix }}{{ vm_type }}{{ cifmw_libvirt_manager_vm_separator }}{{ vm_id }}"
        vol_num: "{{ vm_data.value.extra_disks_num }}"
        vol_size: "{{ vm_data.value.extra_disks_size }}"
      ansible.builtin.include_tasks: volumes.yml
      loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
      loop_control:
        index_var: vm_id
        label: "{{ vm_type }}{{ cifmw_libvirt_manager_vm_separator }}{{ vm_id }}"
        loop_var: vms_id

    - name: "Define VMs with template for type {{ vm_type }}"
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', cifmw_libvirt_manager_vm_template) }}"
        uri: "qemu:///system"
      loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
      loop_control:
        index_var: vm_id
        label: "{{ vm_type }}{{ cifmw_libvirt_manager_vm_separator }}{{ vm_id }}"

- name: "Attach listed networks to the VMs {{ vm_type }}"  # noqa: no-handler
  when:
    - _create_overlays is changed
    - >-
      not cifmw_libvirt_manager_spineleaf_setup or
      'controller' in vm_type
  vars:
    vm_item: "{{ vm_type }}{{ cifmw_libvirt_manager_vm_separator }}{{ vm_id }}"
    networks: "{{ vm_data.value.nets }}"
  ansible.builtin.include_tasks: net_to_vms.yml
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}{{ cifmw_libvirt_manager_vm_separator }}{{ vm_id }}"

- name: "Attach spines/leafs networks to the VMs {{ vm_type }}"
  when:
    - _create_overlays is changed
    - cifmw_libvirt_manager_spineleaf_setup
    - "'controller' not in vm_type"
  vars:
    vm_item: "{{ vm_type }}{{ cifmw_libvirt_manager_vm_separator }}{{ vm_id }}"
    networks: "{{ vm_data.value.spineleafnets[vm_id] }}"
  ansible.builtin.include_tasks: net_to_vms.yml
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}{{ cifmw_libvirt_manager_vm_separator }}{{ vm_id }}"

- name: "Start (power-on) {{ vm_type }}"
  when:
    - vm_data.value.start | default(true) | bool
    - "vm_data.value.disk_file_name != 'blank'"
  ansible.builtin.include_tasks: start_vms.yml

- name: "Grab IP address and manage {{ vm_type }}"
  when:
    - vm_data.value.manage | default(true) | bool
    - vm_data.value.start | default(true) | bool
    - "vm_data.value.disk_file_name != 'blank'"
  vars:
    _need_start: "{{ _create_overlays is changed }}"
  ansible.builtin.include_tasks: manage_vms.yml
